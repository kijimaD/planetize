// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xVz2vUQBT+V/TpMd1kW1TMrVgthSILXS+KyDR5mx3dmYmTiVhLDrtFEHoXvYlIEQqC",
	"Vy/+MdFS/wuZyWyS/RETQbzNzr7vy/d98+bNMQSCxYIjVwn4x5AEY2TELO8IPqKRXsVSxCgVxaJEpDIo",
	"llQhM4vrEkfgwzW3YnMtlXtg6iFzQB3FCD4QKcmR+U2i7jRDEq1yZA5IfJ5SiSH4j0pplvpxWS4On2Kg",
	"NP4e6tJlT8iVpH/hSbPc5UoerbMVIUdJFIZPiGolojgJd+eAbbViaYHMKYU2WStErfibUP6sk5R9XZg5",
	"EKeHE5qMi6xaUYOyOnPsIXTCVa2RpIyRQnk7ytbq6KmadPvU0FQup1vgnSKfuutKUWlobeSaegeTwDTR",
	"S8JiLQd2RT49//X2Yz59n89OL05e//zwFUp4oiTlUQmvn/4Cy6a3eWPDu7nR3xp6t/2tvu/deggOjIRk",
	"urEgJAo3FGXYSL1vj73iHCsVJ77r2p1eIJhLpKKBiaGkTiVtJL1PGC6SzldNiEG9mf6lv4Oy1bqLOag6",
	"rQJdfn7349tpPv1ycTa7PJs2gock2qeJWpgTFUsk1gGXx0OtHddpmH3PZ5/ykzf5yXmjjAdy0n6sI8Sw",
	"R5RgHQ62CnJxboS2tVuvl7kDmQPcNkcrwHRR7Q1ov8A2+syBtLDfCtExLd94jbUyncLeHx4L/eb890yW",
	"BNelrmrU1ZSPxFyYpLGigoMPgwnhqOgrlFe2B3tXoRyWS/+AAy9QJgWo3/N6ntYsYuQkpuDDVq/f8/Rs",
	"JGps/Lthypi5PxGq1e8W/xoGSfTeXgg+7NhdiUkseGKSrI99C8uyLPsdAAD///d6eJaTCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
