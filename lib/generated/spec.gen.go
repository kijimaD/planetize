// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7SW3Wv7VBjH/5WfRy+zpv0NFXM3nI5BGWXrbhQZZ+1perTJieecinMETGJlY05FcC9X",
	"c7o31q4MRHxhsD/mLKX7L+QkaZs07Zoi3p0mz8vn+T7PydNdUCGGRUxkcga0XcAqdWTA4Pg+MWtYlyeL",
	"EgtRjlFoQpq0Eh4xR0ZweIuiGtDAm+oomhqFUsM4G4EXsBXAdywENAAphTvBb6jPG6wM9XQkWwEUfd7E",
	"FFWB9vEQM0rwydCcbH+KKlz6J8hSdVYRq8zCCX2XpaWtABMaKJvHmrSUwIxtNWkjm9M6Y5u0EZdstk8Z",
	"6kXMeEqdQeIIWgmrnamVFP4/CFWG+vxalaEeyjVWQhx8EvGHSNqNwyKTUzzH9MooH5ic7kwaXR2ZiEKO",
	"qluQZwm0MrBfSnckEUsZck6rLGRKldfA5mdZSIrSzlaA1dxuYFYPlZrlVBoa20p0v7K4ja4+axoGDLFn",
	"OkWmUnXMG5kSlQPDcWFDdyWUJl7xiGdYzTS1442LJp5ii2NiAg0I72fh/ia8B+HtC/dOeJfC68if7p/C",
	"uxbe78L9ye+e9c+/E86xcM56x5e9U1f2+EtoWLI08Dr/+u2F/DsLhcVy/j1tsaDl3/0IKKBGqCEnC1Qh",
	"RwscBwMfATJOsakPAItR318iu5Eo3p7wboXT3VwvJgjqnFtMU9XoSa5CDBVSjisNpBbiKE2Kp0GU4sOU",
	"mcRvdZ6PDv4PUUZf9swwz63Dp8dz4f4h3Av50On6Px76+4cJsOj0imE+Pfdo1DMn7125/Ssnkap/c/L0",
	"z0H83cRs5cEVyZxLuI9RiV57csYxi1Te2O5LJV7f2AiV9FuecLr9207v5PtEmhUiPCcg+0U4beHuCffA",
	"b3X8hx+EdyS8O+HeT0+6Fi2PF5NOb9z0wNGKnRQ6452pIVTNQU6MDHcmuRRn1NMWzoVwvhHOWdCY+8nz",
	"skKE034++lU4p1LQb1t+9+9BL+9fZAj+JszJ8PTX1/2ra6BkW6Vj6zy9TpMGc7IkZNBJula5F7BZI+nA",
	"pQY0EcdfIfpqqbT6BhiunLE3QAFfIMpCp0Iun8tLamIhE1oYaGAxV8jl5YqBvB6ooVabhhF8A3Q0Qdzw",
	"bRCBQvlstQo0sBw9pYhZxGTBXo/vzsjNtm373wAAAP//IUNmsb4LAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
